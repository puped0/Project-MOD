<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="eba8b112-8dcd-47f6-83fa-7da28ba1d168" Language="Lua" Name="UnitNormalAttack" Type="BTNodeType" Source="None" ModifyTime="2022-02-08T03:13:01.5161597+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="PrevAttackTime" Type="number" DefaultValue="0" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="OnBehave" ExecSpace="All">
      <Return Type="any" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="delta" Type="number" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
-- 일반공격을 하는 유닛을 위한 동작

if self.ParentAI.time >= self.ParentAI.tick then
	local UnitEntity = self.ParentAI.Entity
	local UnitAIComp = UnitEntity.UnitAIComponent
	local UnitInfo = UnitEntity.Unit.UnitInfo
	local CurrentAttackTime = _UtilLogic.ElapsedSeconds
	local CurrentState = UnitEntity.StateComponent.CurrentStateName
	
	-- 공격명령을 너무 충실히 수행해서 못움직이므로(후퇴 불가)
	-- IDLE 상태일 때만 공격 가능하게 함
	if isvalid(UnitAIComp.TargetEntity) and CurrentAttackTime >= self.PrevAttackTime + UnitInfo["AttackCooldown"] and CurrentState == "IDLE" then
		local AttackRange = UnitInfo["AttackRange"]
		local AttackOffset = UnitInfo["AttackRange"]
		local UnitPosition = Vector2(UnitEntity.TransformComponent.Position.x, UnitEntity.TransformComponent.Position.y)
		local TargetPosition = UnitAIComp.TargetEntity.TransformComponent.Position
		
		if TargetPosition.x < (UnitPosition.x - AttackOffset.x - AttackRange.x/2) or TargetPosition.x > (UnitPosition.x + AttackOffset.x + AttackRange.x/2) then
			return BehaviourTreeStatus.Failure
		else
			self.ParentAI.time = 0
			self.PrevAttackTime = CurrentAttackTime
			
			UnitEntity.SpriteRendererComponent.FlipX = (TargetPosition.x > UnitPosition.x)
			
			UnitEntity.MovementComponent:Stop()
			UnitEntity.StateComponent:ChangeState("ATTACK")
			UnitEntity.UnitAIComponent.AttackTimerId = _TimerService:SetTimerOnce(self.delayAttack, UnitInfo["AttackDelay"])
			
			return BehaviourTreeStatus.Success
		end
	end
end

return BehaviourTreeStatus.Failure

--[[
if self.ParentAI.time >= self.ParentAI.tick then
	
	local UnitEntity = self.ParentAI.Entity
	local CanAttack = false
	local CurrentState = UnitEntity.StateComponent.CurrentStateName
	
	local UnitInfo = UnitEntity.Unit.UnitInfo
	
	local v3UnitPosition = UnitEntity.TransformComponent.Position
	local UnitPosition = Vector2(v3UnitPosition.x, v3UnitPosition.y)
	
	local BoxOffset = UnitEntity.HitComponent.BoxOffset
	local BoxSize = UnitInfo["AttackRange"]
	
	local TriggerComponents = _CollisionService:GetMapServiceFor(UnitEntity):OverlapBox("TriggerBox", UnitPosition + BoxOffset, BoxSize)
	local FlipX = false
	
	if TriggerComponents.Count <= 0 then
		return BehaviourTreeStatus.Failure
	end
	
	for i, value in pairs(TriggerComponents) do
		if value.Entity.TagComponent ~= nil and value.Entity.TagComponent.Tags:Contains("enemy") and value.Entity.StateComponent.CurrentStateName ~= "DEAD" then
			if value.Entity.TransformComponent.Position.x < UnitPosition.x then
				FlipX = false
			else
				FlipX = true
			end
			
			CanAttack = true
			break
		end
	end
	
	if CanAttack == true and CurrentState == "IDLE"  then
	--if CanAttack == true then
		
		local CurrentAttackTime = _UtilLogic.ElapsedSeconds
		
		if CurrentAttackTime >= self.PrevAttackTime + UnitInfo["AttackCooldown"] then
			self.ParentAI.time = 0
			self.PrevAttackTime = CurrentAttackTime
			
			UnitEntity.MovementComponent:Stop()
			UnitEntity.SpriteRendererComponent.FlipX = FlipX
			UnitEntity.StateComponent:ChangeState("ATTACK")
			
			UnitEntity.UnitAIComponent.AttackTimerId = _TimerService:SetTimerOnce(self.delayAttack, UnitInfo["AttackDelay"])
			
			return BehaviourTreeStatus.Success
		else
			return BehaviourTreeStatus.Failure
		end
	else
		return BehaviourTreeStatus.Failure
	end
end

return BehaviourTreeStatus.Failure
]]
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="delayAttack" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
local UnitEntity = self.ParentAI.Entity
if isvalid(UnitEntity) then
	UnitEntity.UnitAttackComponent:AttackNormal()
end
]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>