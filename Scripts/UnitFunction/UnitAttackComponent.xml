<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="2707251a-6cd9-4f20-8512-359a71c840c0" Language="Lua" Name="UnitAttackComponent" Type="Extend" Source="None" Target="MOD.Core.AttackComponent" ModifyTime="2022-02-09T00:02:15.7351626+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="AttackCount" Type="number" DefaultValue="0" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="description" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- 모든 Unit에서 사용하는 컴포넌트
-- 공격 타입에 따라 Normal과 Heal로 나뉨
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackNormal" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments />
      <Code><![CDATA[
local Entity = self.Entity
local FlipX = self.Entity.SpriteRendererComponent.FlipX
local LookDirectionX = 0

local UnitInfo = Entity.Unit.UnitInfo

if FlipX then
	LookDirectionX = 1
else
	LookDirectionX = -1
end

local _attackOffset = UnitInfo["AttackOffset"]

local attackSize = UnitInfo["AttackRange"]
local attackOffset = Vector2(_attackOffset.x * LookDirectionX, _attackOffset.y)

local AttackCooldown = UnitInfo["AttackCooldown"]
local AttackDelay = UnitInfo["AttackDelay"]
local MaxAttackCount = UnitInfo["MaxAttackCount"]

self:AttackLimitTarget(attackSize, attackOffset, "Normal", MaxAttackCount)

-- 공격을 마치고 STAND 상태로 돌아가야 함

wait((AttackCooldown - AttackDelay) * 0.5)
if isvalid(Entity) then
	Entity.StateComponent:ChangeState("IDLE")
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="Heal" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments />
      <Code><![CDATA[
local Entity = self.Entity
local FlipX = self.Entity.SpriteRendererComponent.FlipX
local LookDirectionX = 0

local UnitInfo = Entity.Unit.UnitInfo

if FlipX then
	LookDirectionX = 1
else
	LookDirectionX = -1
end

local _attackOffset = UnitInfo["AttackOffset"]

local attackSize = UnitInfo["AttackRange"]
local attackOffset = Vector2(_attackOffset.x * LookDirectionX, _attackOffset.y)

local AttackCooldown = UnitInfo["AttackCooldown"]
local AttackDelay = UnitInfo["AttackDelay"]
local MaxAttackCount = UnitInfo["MaxAttackCount"]

--self:AttackLimitTarget(attackSize, attackOffset, nil, MaxAttackCount, HitComponents)
self:HealLimitTarget(attackSize, attackOffset, "Normal", MaxAttackCount)

-- 공격을 마치고 STAND 상태로 돌아가야 함
-- timer 수행 전에 유닛이 죽어버리면 버그 발생 가능성 있음
local callback = function()
	if isvalid(Entity) then
		Entity.StateComponent:ChangeState("IDLE")
	end
end

_TimerService:SetTimerOnce(callback, (AttackCooldown - AttackDelay) * 0.8)


--[[
wait((AttackCooldown - AttackDelay) * 0.8)
if isvalid(Entity) then
	Entity.StateComponent:ChangeState("IDLE")
end
]]
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackLimitTarget" ExecSpace="ServerOnly">
      <Return Type="table" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="size" Type="Vector2" SyncDirection="None" />
        <CodeBlockProperty Name="offset" Type="Vector2" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
        <CodeBlockProperty Name="MaxAttackCount" Type="number" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local UnitEntity = self.Entity
local v3UnitPosition = UnitEntity.TransformComponent.Position
local UnitPositon = Vector2(v3UnitPosition.x, v3UnitPosition.y)

local TriggerComponents = _CollisionService:GetMapServiceFor(UnitEntity):OverlapBox("TriggerBox", UnitPositon + offset, size)


local VictimTriggerComponents = {}
local HitCount = 0

if TriggerComponents.Count <= 0 then
	return VictimTriggerComponents
end

for i, value in pairs(TriggerComponents) do
	local Victim = value.Entity
	
	if Victim ~= nil and Victim.EnabledInHierarchy ~= false and UnitEntity ~= Victim and Victim.HitComponent ~= nil and self:IsAttackTarget(Victim) then
		
		local Damage = self:CalcDamage(self.Entity, Victim, attackInfo)
		local IsCritical = self:CalcCritical(self.Entity, Victim, attackInfo)
		local HitComp = Victim.HitComponent
		
		if IsCritical then
			Damage = math.floor(Damage * self:GetCriticalDamageRate())
		end
		
		self:OnAttack(Victim)
		HitComp:OnHit(self.Entity, Damage, IsCritical, attackInfo, self:GetDisplayHitCount(attackInfo))
		
		HitCount = HitCount + 1
		table.insert(VictimTriggerComponents, HitComp)
		
		if HitCount >= MaxAttackCount then
			break
		end
	end
end

return VictimTriggerComponents
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="HealLimitTarget" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="size" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="offset" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" DefaultValue="&quot;&quot;" SyncDirection="None" />
        <CodeBlockProperty Name="MaxAttackCount" Type="number" DefaultValue="0" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local UnitEntity = self.Entity
local v3UnitPosition = UnitEntity.TransformComponent.Position
local UnitPositon = Vector2(v3UnitPosition.x, v3UnitPosition.y)

local HitComponents = _CollisionService:GetMapServiceFor(UnitEntity):OverlapBox("HitBox", UnitPositon + offset, size)


local VictimHitComponents = {}
local HitCount = 0

if HitComponents.Count <= 0 then
	return VictimHitComponents
end

for i, value in pairs(HitComponents) do
	local Victim = value.Entity
	
	if Victim ~= nil and Victim.EnabledInHierarchy ~= false and UnitEntity ~= Victim and Victim.HitComponent ~= nil and self:IsAttackTarget(Victim) then
		
		local Damage = self:CalcDamage(self.Entity, Victim, attackInfo)
		local IsCritical = self:CalcCritical(self.Entity, Victim, attackInfo)
		local HitComp = Victim.HitComponent
		
		if IsCritical then
			Damage = math.floor(Damage * self:GetCriticalDamageRate())
		end
		
		self:OnAttack(Victim)
		HitComp:OnHit(self.Entity, Damage, IsCritical, attackInfo, self:GetDisplayHitCount(attackInfo))
		
		HitCount = HitCount + 1
		table.insert(VictimHitComponents, HitComp)
		
		if HitCount >= MaxAttackCount then
			break
		end
	end
end

return VictimHitComponents
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="CalcDamage" ExecSpace="All">
      <Return Type="int" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attacker" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
--return __base:CalcDamage(attacker,defender,attackInfo)
return self.Entity.Unit.UnitInfo["Attack"]
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="IsAttackTarget" ExecSpace="All">
      <Return Type="boolean" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local tagCondition = false
local AttackType = self.Entity.Unit.UnitInfo["AttackType"]

if isvalid(defender) and defender.TagComponent ~= nil then
	if AttackType == "Heal" then
		if defender.TagComponent.Tags:Contains("unit") then
			tagCondition = defender.Unit.Hp < defender.Unit.UnitInfo["MaxHp"]
		elseif defender.TagComponent.Tags:Contains("player") then
			tagCondition = defender.ExtendPlayerComponent.Hp < defender.ExtendPlayerComponent.MaxHp
		else
			tagCondition = false
		end
	else
		tagCondition = defender.TagComponent.Tags:Contains("enemy")
	end
	
	if defender.StateComponent.CurrentStateName == "DEAD" or tagCondition == false then
		return false
	else
		return __base:IsAttackTarget(defender)
	end
else
	return false
end
]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>