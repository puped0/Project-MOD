<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="50f99e7f-3262-4d20-8e48-faf2744970f6" Language="Lua" Name="MonsterAttackComponent" Type="Extend" Source="None" Target="MOD.Core.AttackComponent" ModifyTime="2022-02-08T01:56:06.108456+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="AttackCount" Type="number" DefaultValue="0" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="description" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- 모든 Monster 모델에서 사용하는 컴포넌트
-- 몬스터의 공격 관련 코드
-- 다수 공격과 단일 공격 코드로 나뉨(최적화 관련)
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackNormal" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments />
      <Code><![CDATA[
-- Attack 노드에서 호출되는 함수
-- 공격 모션이 있는 몬스터가 호출

local Entity = self.Entity
local FlipX = self.Entity.SpriteRendererComponent.FlipX
local LookDirectionX = 0

if FlipX then
	LookDirectionX = 1
else
	LookDirectionX = -1
end

local _attackOffset = Entity.Monster.AttackOffset

local attackSize = Entity.Monster.AttackRange
local attackOffset = Vector2(_attackOffset.x * LookDirectionX, _attackOffset.y)

local AttackCooldown = Entity.Monster.AttackCooldown
local AttackDelay = Entity.Monster.AttackDelay
local MaxAttackCount = Entity.Monster.MaxAttackCount

if MaxAttackCount ~= 1 then
	self:AttackLimitTarget(attackSize, attackOffset, nil, MaxAttackCount)
else
	self:AttackOneTarget(attackSize, attackOffset, nil)
end

-- 공격을 마치고 STAND 상태로 돌아가야 함
wait((AttackCooldown - AttackDelay))
if isvalid(Entity) and Entity.StateComponent.CurrentStateName ~= "DEAD" then
	Entity.StateComponent:ChangeState("IDLE")
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackBody" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments />
      <Code><![CDATA[
-- 공격 모션이 없는 몬스터가 호출

local Entity = self.Entity

local attackSize = Entity.Monster.AttackRange
local attackOffset = Entity.Monster.AttackOffset

local MaxAttackCount = Entity.Monster.MaxAttackCount

if MaxAttackCount ~= 1 then
	self:AttackLimitTarget(attackSize, attackOffset, nil, MaxAttackCount)
else
	self:AttackOneTarget(attackSize, attackOffset, nil)
end

Entity.StateComponent:ChangeState("MOVE")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackLimitTarget" ExecSpace="ServerOnly">
      <Return Type="table" DefaultValue="{}" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="size" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="offset" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" DefaultValue="&quot;&quot;" SyncDirection="None" />
        <CodeBlockProperty Name="MaxAttackCount" Type="number" DefaultValue="0" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local MonsterEntity = self.Entity
local v3MonsterPosition = MonsterEntity.TransformComponent.Position
local MonsterPositon = Vector2(v3MonsterPosition.x, v3MonsterPosition.y)

-- 공격할 엔티티 탐색
local HitComponents = _CollisionService:GetMapServiceFor(MonsterEntity):OverlapBox("HitBox", MonsterPositon + offset, size)

local VictimHitComponents = {}
local HitCount = 0

if HitComponents.Count <= 1 then
	return VictimHitComponents
end

-- 공격이 유효한 엔티티만 공격
for i, value in pairs(HitComponents) do
	local Victim = value.Entity
	
	if Victim ~= nil and Victim.EnabledInHierarchy ~= false and MonsterEntity ~= Victim and self:IsAttackTarget(Victim) then
		
		local Damage = self:CalcDamage(self.Entity, Victim, attackInfo)
		local IsCritical = self:CalcCritical(self.Entity, Victim, attackInfo)
		
		if IsCritical then
			Damage = math.floor(Damage * self:GetCriticalDamageRate())
		end
		
		self:OnAttack(Victim)
		value:OnHit(self.Entity, Damage, IsCritical, attackInfo, self:GetDisplayHitCount(attackInfo))
		
		HitCount = HitCount + 1
		table.insert(VictimHitComponents, value)
		
		if HitCount >= MaxAttackCount then
			break
		end
	end
	
	::continue::
end

return VictimHitComponents
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackOneTarget" ExecSpace="ServerOnly">
      <Return Type="table" DefaultValue="{}" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="size" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="offset" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" DefaultValue="&quot;&quot;" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
-- 단일 대상만 공격

local MonsterEntity = self.Entity
local v3MonsterPosition = MonsterEntity.TransformComponent.Position
local MonsterPositon = Vector2(v3MonsterPosition.x, v3MonsterPosition.y)
local TargetEntity = MonsterEntity.MonsterAIComponent.TargetEntity

local HitComponents = {}

if isvalid(TargetEntity) and self:IsAttackTarget(TargetEntity)then
	local Damage = self:CalcDamage(self.Entity, TargetEntity, attackInfo)
	local IsCritical = self:CalcCritical(self.Entity, TargetEntity, attackInfo)
	
	if IsCritical then
		Damage = math.floor(Damage * self:GetCriticalDamageRate())
	end
	
	self:OnAttack(TargetEntity)
	TargetEntity.HitComponent:OnHit(self.Entity, Damage, IsCritical, attackInfo, self:GetDisplayHitCount(attackInfo))
	
	table.insert(HitComponents, TargetEntity.HitComponent)
end

return HitComponents
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="CalcDamage" ExecSpace="All">
      <Return Type="int" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attacker" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
return self.Entity.Monster.Attack
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="IsAttackTarget" ExecSpace="All">
      <Return Type="boolean" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
if defender.TagComponent ~= nil then
	if defender.StateComponent.CurrentStateName == "DEAD" 
	or defender.TagComponent.Tags:Contains("friendly") == false then
		return false
	else
		return __base:IsAttackTarget(defender)
	end
else
	return false
end
]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>