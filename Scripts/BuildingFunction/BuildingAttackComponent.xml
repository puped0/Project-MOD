<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="5fb48c11-e085-480f-aa8b-d4265db33c9a" Language="Lua" Name="BuildingAttackComponent" Type="Extend" Source="None" Target="MOD.Core.AttackComponent" ModifyTime="2022-02-08T01:05:40.1053437+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="BuildingInfo" Type="table" DefaultValue="{}" SyncDirection="None" />
    <CodeBlockProperty Name="TargetEntity" Type="Entity" DefaultValue="nil" SyncDirection="None" />
    <CodeBlockProperty Name="PrevAttackTime" Type="number" DefaultValue="0" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="description" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- 모든 건물에서 사용
-- 건물의 공격 관련 코드(실제론 Ballista만 사용함)
-- 공격 쿨타임 마다 TargetEntity 탐색
-- TargerEntity가 죽거나 공격 범위를 벗어날 때 까지 공격, 이후 재탐색
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnBeginPlay" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
local Entity = self.Entity
local Common = _EntityService:GetEntityByPath("/common")
local Name = _UtilLogic:Split(Entity.Name, "_")[1]

self.BuildingInfo = Common.Common.Building[Name]

self.TargetEntity = nil
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnUpdate" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="delta" Type="number" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local CurrentAttackTime = _UtilLogic.ElapsedSeconds

if CurrentAttackTime > self.PrevAttackTime + self.BuildingInfo["AttackCooldown"] then
	self.PrevAttackTime = CurrentAttackTime
	
	local Entity = self.Entity
	local EntityPosition = Vector2(Entity.TransformComponent.Position.x, Entity.TransformComponent.Position.y)
	
	if not isvalid(self.TargetEntity) then
		local TriggerComponents = _CollisionService:GetMapServiceFor(Entity):OverlapBox("TriggerBox", EntityPosition, self.BuildingInfo["AttackRange"] * 2)
		
		if TriggerComponents.Count <= 0 then
			return
		end
		
		Entity.StateComponent:ChangeState("IDLE")
		
		for i, value in pairs(TriggerComponents) do
			if value.Entity.TagComponent ~= nil and value.Entity.TagComponent.Tags:Contains("enemy") then
				self.TargetEntity = value.Entity
			end
		end
	else
		local TargetPosition = self.TargetEntity.TransformComponent.Position
		
		if TargetPosition.x < (EntityPosition.x -self.BuildingInfo["AttackOffset"].x - self.BuildingInfo["AttackRange"].x/2) 
			or TargetPosition.x > (EntityPosition.x + self.BuildingInfo["AttackOffset"].x + self.BuildingInfo["AttackRange"].x/2) then
			self.TargetEntity = nil
		else
			if TargetPosition.x < EntityPosition.x then
				Entity.SpriteRendererComponent.FlipX = false
			else
				Entity.SpriteRendererComponent.FlipX = true
			end
			
			Entity.StateComponent:ChangeState("ATTACK")
			self:AttackNormal()
		end
	end
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackNormal" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
local Entity = self.Entity

local attackSize = self.BuildingInfo["AttackRange"]
local attackOffset = self.BuildingInfo["AttackOffset"]

local FlipX = self.Entity.SpriteRendererComponent.FlipX
local LookDirectionX = 0

if FlipX then
	LookDirectionX = 1
else
	LookDirectionX = -1
end

self:Attack(attackSize, Vector2(attackOffset.x * LookDirectionX, attackOffset.y), "Normal")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="CalcDamage" ExecSpace="All">
      <Return Type="int" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attacker" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
return self.BuildingInfo["Attack"]
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="IsAttackTarget" ExecSpace="All">
      <Return Type="boolean" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
if defender.TagComponent ~= nil then
	if defender.StateComponent.CurrentStateName == "DEAD" or defender.TagComponent.Tags:Contains("friendly") then
		return false
	else
		return __base:IsAttackTarget(defender)
	end
else
	return false
end

]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>