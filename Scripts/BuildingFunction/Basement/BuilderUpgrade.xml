<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="aa4c6751-bb19-467a-b671-555966c208d4" Language="Lua" Name="BuilderUpgrade" Type="Component" Source="None" ModifyTime="2022-02-08T00:31:02.0135641+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties />
  <Methods>
    <CodeBlockMethod Name="description" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- /ui/BuilderUpgradeUI/BuilderUpgradeInfo/UpgradeList
-- Basement 건물 동작
-- 건물 및 유닛 업그레이드에 관련된 UI 동작을 수행하는 코드
-- UI 동작 후엔 Server에서 관련 업그레이드 수행(데이터 수정)
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnBeginPlay" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- UI 초기화

local UpgradeList = self.Entity
local UpgradeButtons = {}

UpgradeButtons["BarricadeMaxHp"] = UpgradeList:GetChildByName("BarricadeMaxHp")
UpgradeButtons["BarricadeDefence"] = UpgradeList:GetChildByName("BarricadeDefence")
UpgradeButtons["BallistaAttack"] = UpgradeList:GetChildByName("BallistaAttack")
UpgradeButtons["ShortRangeUnitAttack"] = UpgradeList:GetChildByName("ShortRangeUnitAttack")
UpgradeButtons["LongRangeUnitAttack"] = UpgradeList:GetChildByName("LongRangeUnitAttack")
UpgradeButtons["UnitMaxHp"] = UpgradeList:GetChildByName("UnitMaxHp")
UpgradeButtons["UnitDefence"] = UpgradeList:GetChildByName("UnitDefence")

UpgradeButtons["BarricadeMaxHp"]:ConnectEvent(ButtonClickEvent, self.BarricadeMaxHp)
UpgradeButtons["BarricadeDefence"]:ConnectEvent(ButtonClickEvent, self.BarricadeDefence)
UpgradeButtons["BallistaAttack"]:ConnectEvent(ButtonClickEvent, self.BallistaAttack)
UpgradeButtons["ShortRangeUnitAttack"]:ConnectEvent(ButtonClickEvent, self.ShortRangeUnitAttack)
UpgradeButtons["LongRangeUnitAttack"]:ConnectEvent(ButtonClickEvent, self.LongRangeUnitAttack)
UpgradeButtons["UnitMaxHp"]:ConnectEvent(ButtonClickEvent, self.UnitMaxHp)
UpgradeButtons["UnitDefence"]:ConnectEvent(ButtonClickEvent, self.UnitDefence)

local LocalPlayer = _UserService.LocalPlayer

local Common = _EntityService:GetEntityByPath("/common")
local BuilderUpgradeInfo = Common.Common.BuilderUpgradeInfo
local BuildingInfo = Common.Common.Building
local UnitInfo = Common.Common.Unit

for Name, UpgradeButton in pairs(UpgradeButtons) do
	local Description = UpgradeButton:GetChildByName("Description")
	local Cost = UpgradeButton:GetChildByName("Cost")
	local Level = UpgradeButton:GetChildByName("Level")
	local Info = BuilderUpgradeInfo[Name]
	
	if Name == "BarricadeMaxHp" then
		Description.TextComponent.Text = "+ 0%" .. "  ▶  + " .. tostring(Info["Amount"] * 100) .. "%"
	elseif Name == "BarricadeDefence" then
		local Barricade1 = BuildingInfo["Barricade1"]
		Description.TextComponent.Text = tostring(Barricade1["Defence"]) .. "  ▶  " .. tostring(Barricade1["Defence"] + Info["Amount"])
	elseif Name == "BallistaAttack" then
		local Ballista = BuildingInfo["Ballista"]
		Description.TextComponent.Text = tostring(Ballista["Attack"]) .. "  ▶  " .. tostring(Ballista["Attack"] + Info["Amount"])
	elseif Name == "ShortRangeUnitAttack" then
		Description.TextComponent.Text = "+ 0" .. "  ▶  + " .. tostring(Info["Amount"])
	elseif Name == "LongRangeUnitAttack" then
		Description.TextComponent.Text = "+ 0" .. "  ▶  + " .. tostring(Info["Amount"])
	elseif Name == "UnitMaxHp" then
		Description.TextComponent.Text = "+ 0%" .. "  ▶  + " .. tostring(Info["Amount"] * 100) .. "%"
	elseif Name == "UnitDefence" then
		Description.TextComponent.Text = "+ 0" .. "  ▶  + " .. tostring(Info["Amount"])
	end
	
	Cost.TextComponent.Text = tostring(Info["InitCost"])
	Level.TextComponent.Text = "1"
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="BarricadeMaxHp" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("BarricadeMaxHp")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="BarricadeDefence" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("BarricadeDefence")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="BallistaAttack" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("BallistaAttack")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="ShortRangeUnitAttack" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("ShortRangeUnitAttack")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="LongRangeUnitAttack" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("LongRangeUnitAttack")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="UnitMaxHp" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("UnitMaxHp")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="UnitDefence" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
self:StatUpgrade("UnitDefence")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="StatUpgrade" ExecSpace="ClientOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="StatName" Type="string" DefaultValue="&quot;&quot;" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
-- 업그레이드 관련 UI 동작
-- 서버의 업그레이드 관련 함수 호출

local Entity = self.Entity
local LocalPlayer = _UserService.LocalPlayer
local BuilderUpgradeInfoEntity = _EntityService:GetEntityByPath("/ui/BuilderUpgradeUI/BuilderUpgradeInfo")
local CalledBy = BuilderUpgradeInfoEntity.BuilderUpgradeUIManager.CalledBy

-- 건물이 부숴졌을 경우 UI 동작이 무효하므로 UI를 강제로 끔
if not isvalid(CalledBy) then
	BuilderUpgradeInfoEntity:SetVisible(false)
	BuilderUpgradeInfoEntity:SetEnable(false)
	return
end

local PlayerPosition = Vector2(LocalPlayer.TransformComponent.Position.x, LocalPlayer.TransformComponent.Position.y)
local BuildingPosition = Vector2(CalledBy.TransformComponent.Position.x, CalledBy.TransformComponent.Position.y)

-- 건물과 플레이어간 거리가 3 이상이면 UI를 강제로 끔... 건물 근처에서만 업그레이드 하게끔 하기 위함
if Vector2.Distance(PlayerPosition, BuildingPosition) > 3 then
	BuilderUpgradeInfoEntity.BuilderUpgradeUIManager:SetUI(false)
	return
end

local Common = _EntityService:GetEntityByPath("/common")
local BuildingInfo = Common.Common.Building
local UnitInfo = Common.Common.Unit
local Info = Common.Common.BuilderUpgradeInfo[StatName]

local StatLevel = Common.Common.BuilderUpgradeLevel[StatName]

local Cost = Info["InitCost"] + Info["IncreasementCost"] * (StatLevel - 1)
local BuilderMoney = Common.Common.BuilderMoney

-- 돈이 충분하면 업그레이드 수행
if BuilderMoney >= Cost then
	local UpgradeButton = Entity:GetChildByName(StatName)
	local DescriptionEntity = UpgradeButton:GetChildByName("Description")
	local CostEntity = UpgradeButton:GetChildByName("Cost")
	local LevelEntity = UpgradeButton:GetChildByName("Level")
	
	if StatName == "BarricadeMaxHp" then
		DescriptionEntity.TextComponent.Text = "+ " .. tostring(Info["Amount"] * 100 * StatLevel) .. "  ▶  + " .. tostring(Info["Amount"] * 100 * (StatLevel + 1)) .. "%"
	elseif StatName == "BarricadeDefence" then
		local Barricade1 = BuildingInfo["Barricade1"]
		DescriptionEntity.TextComponent.Text = tostring(Barricade1["Defence"] + Info["Amount"]) .. "  ▶  " .. tostring(Barricade1["Defence"] + Info["Amount"]*2)
	elseif StatName == "BallistaAttack" then
		local Ballista = BuildingInfo["Ballista"]
		DescriptionEntity.TextComponent.Text = tostring(Ballista["Attack"] + Info["Amount"]) .. "  ▶  " .. tostring(Ballista["Attack"] + Info["Amount"]*2)
	elseif StatName == "ShortRangeUnitAttack" then
		DescriptionEntity.TextComponent.Text = "+ " .. tostring(Info["Amount"] * StatLevel) .. "  ▶  + " .. tostring(Info["Amount"] * (StatLevel + 1))
	elseif StatName == "LongRangeUnitAttack" then
		DescriptionEntity.TextComponent.Text = "+ " .. tostring(Info["Amount"] * StatLevel) .. "  ▶  + " .. tostring(Info["Amount"] * (StatLevel + 1))
	elseif StatName == "UnitMaxHp" then
		DescriptionEntity.TextComponent.Text = "+ " .. tostring(Info["Amount"] * 100 * StatLevel) .. "%  ▶  + " .. tostring(Info["Amount"] * 100 * (StatLevel + 1)) .. "%"
	elseif StatName == "UnitDefence" then
		DescriptionEntity.TextComponent.Text = "+ " .. tostring(Info["Amount"] * StatLevel) .. "  ▶  + " .. tostring(Info["Amount"] * (StatLevel + 1))
	end
	
	CostEntity.TextComponent.Text = tostring(math.floor(Cost + Info["IncreasementCost"]))
	LevelEntity.TextComponent.Text = tostring(math.floor(StatLevel + 1))
	
	Common.Common:StatUpgrade(StatName, Info["Amount"], Cost)
end

]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>