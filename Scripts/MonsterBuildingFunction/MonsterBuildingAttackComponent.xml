<?xml version="1.0" encoding="utf-8"?>
<CodeBlockFile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Id="9a9f4e82-501a-4b4d-b028-94267681ec29" Language="Lua" Name="MonsterBuildingAttackComponent" Type="Extend" Source="None" Target="MOD.Core.AttackComponent" ModifyTime="2022-02-08T15:36:33.5454847+09:00">
  <CoreVersion Major="0" Minor="2" />
  <ScriptVersion Major="1" Minor="0" />
  <Description />
  <Properties>
    <CodeBlockProperty Name="TargetEntity" Type="Entity" DefaultValue="nil" SyncDirection="None" />
    <CodeBlockProperty Name="PrevAttackTime" Type="number" DefaultValue="0" SyncDirection="None" />
    <CodeBlockProperty Name="EntityBottomPosition" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
  </Properties>
  <Methods>
    <CodeBlockMethod Name="description" ExecSpace="All">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
-- 모든 몬스터 건물에서 사용
-- 몬스터 건물의 공격 관련 코드
-- 공격 쿨타임 마다 TargetEntity 탐색
-- TargerEntity가 죽거나 공격 범위를 벗어날 때 까지 공격, 이후 재탐색
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnBeginPlay" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Code><![CDATA[
local Entity = self.Entity
local EntityBoxSize = Entity.HitComponent.BoxSize
local EntityBoxOffset = Entity.HitComponent.BoxOffset

-- TargetEntity 탐색에 사용될 포지션 계산
self.EntityBottomPosition = Vector2(Entity.TransformComponent.Position.x, Entity.TransformComponent.Position.y - EntityBoxSize.y/2) + EntityBoxOffset

-- Entity형 프로퍼티의 nil 초기화가 보장되지 않음...

self.TargetEntity = nil
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="OnUpdate" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="delta" Type="number" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local Entity = self.Entity
local MonsterBuildingComp = Entity.MonsterBuilding
local CurrentAttackTime = _UtilLogic.ElapsedSeconds

if CurrentAttackTime > self.PrevAttackTime + MonsterBuildingComp.AttackCooldown then
	self.PrevAttackTime = CurrentAttackTime
	
	local MonsterBuildingBoxSize = Entity.HitComponent.BoxSize
	local AttackRange = MonsterBuildingComp.AttackRange + Vector2(MonsterBuildingBoxSize.x, 0)
	
	if not isvalid(self.TargetEntity) then
		
		-- x2 안한 이유... 공격 방향이 정해져있지 않음(전방향 공격임)
		-- 공격방향이 정해져 있으면 공격 방향의 범위만큼 탐색해야 함
		local HitComponents = _CollisionService:GetMapServiceFor(Entity):OverlapBox("HitBox", self.EntityBottomPosition, AttackRange)
		
		if HitComponents.Count <= 1 then
			return
		end
		
		Entity.StateComponent:ChangeState("IDLE")
		
		for i, value in pairs(HitComponents) do
			if value.Entity.TagComponent ~= nil and value.Entity.TagComponent.Tags:Contains("friendly") then
				self.TargetEntity = value.Entity
				
				--log("타겟 감지")
			end
		end
	end
	
	if isvalid(self.TargetEntity) then
		local TargetPosition = self.TargetEntity.TransformComponent.Position
		
		if TargetPosition.x < (self.EntityBottomPosition.x - AttackRange.x/2) 
			or TargetPosition.x > (self.EntityBottomPosition.x + AttackRange.x/2)
			or TargetPosition.y < (self.EntityBottomPosition.y - AttackRange.y/2)
			or TargetPosition.y > (self.EntityBottomPosition.y + AttackRange.y/2) then
			self.TargetEntity = nil
			--log("타겟 사라짐")
		else
			_SoundService:PlaySoundAtPos(MonsterBuildingComp.AttackSoundRUID, self.Entity.TransformComponent.Position, self.TargetEntity, 1, self.TargetEntity.Name)
			_EffectService:PlayEffect(MonsterBuildingComp.AttackEffectRUID, Entity, Vector3(self.EntityBottomPosition.x, self.EntityBottomPosition.y, 0), 0, Vector3.one)
			
			--log("공격")
			self:AttackNormal(AttackRange)
		end
	end
end
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="AttackNormal" ExecSpace="ServerOnly">
      <Return Type="void" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attackSize" Type="Vector2" DefaultValue="Vector2(0,0)" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
local MonsterBuildingComp = self.Entity.MonsterBuilding
local attackOffset = self.EntityBottomPosition + MonsterBuildingComp.AttackOffset

self:AttackFrom(attackSize, attackOffset, "Normal")
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="CalcDamage" ExecSpace="All">
      <Return Type="int" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="attacker" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
        <CodeBlockProperty Name="attackInfo" Type="string" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
return self.Entity.MonsterBuilding.Attack
]]></Code>
    </CodeBlockMethod>
    <CodeBlockMethod Name="IsAttackTarget" ExecSpace="All">
      <Return Type="boolean" SyncDirection="None" />
      <Arguments>
        <CodeBlockProperty Name="defender" Type="Entity" SyncDirection="None" />
      </Arguments>
      <Code><![CDATA[
if defender.TagComponent ~= nil then
	if defender.StateComponent.CurrentStateName == "DEAD" or defender.TagComponent.Tags:Contains("enemy") then
		return false
	else
		return __base:IsAttackTarget(defender)
	end
else
	return false
end
]]></Code>
    </CodeBlockMethod>
  </Methods>
  <EntityEventHandlers />
</CodeBlockFile>